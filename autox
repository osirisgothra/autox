#!/bin/bash
# vim: tw=0:noet:hls:nospell:sw=4:ts=4:fdc=2:fcl=all:fdo=hor:fen:vbs=0:cf:aw
#===============================================================================
#
#          FILE: autox
#
#         USAGE: ./autox [prologue|epilogue|runtime|exit] {--reload (only needed if ran already)}
#
#   DESCRIPTION: autoalias and other functions (hence, autox)
#
#		 the 'other' stuff is handled by the bootstrap in the
#		 subdir, bootstrap.d/*, see those files for their information!
#
#		 This script will load global alias support and start the bootstrap
#		 to load all other support. This is the only script you need to
#		 execute!!! (checker is in place for that as well)
#
# 		 new alias functions 'aka superaliases' separates alias
#		 definitions into a 'local set' and a 'global set'
#		 The local set is set by 'lalias' and 'lunalias'
#		 The global aliases are set by 'galias' and 'gunalias'
#		 A local alias may be exported to the global table by
#		 using the 'gexport'. Globals are deleted using 'gunalias'
#		 and local ones are deleted by using 'lunalias'. Note that
#		'gunalias' will remove the local copy if the '--all' flag
#		 is used.
#
#         NOTES:alias(1)
#					- more than one argument present AND...
# 					- the first argument is either '-p' or '--' THEN...
#					- remove it from the argument list
# 					otherwise:
#   				- leave them and treat them as actual arguments
#					** in both cases, these flags modify nothing, this is a bash(1) quirk
#					so it must be duplicated it in order to keep function of the alias
# 					command identical in all other cases!
#				alias(2)
#				    if.....called by a function  --or-- has only one argument
#					else...not called by a function + has more than one argument
#
# OPTIONS: o:lalias	[--print|-p] | [alias[=value]] [...]
#          d:--print,-p:print in reusable format//alias:name of alias to show or define//value:command line the alias represents$
#		   o:lunalias	[name] [...] | [--all|-a]
#		   d:--all,-a:remove all local aliases//name:name of local alias to remove$
#		   o:galias	[--print|-p] [alias[=value]] | [search pattern]
#		   d:--print,-p:print in reuable format//alias:name of alias to show or define globally//value:command line the alias represents$
#		   o:gunalias	[--keep-local|-k] [name] | [--all|-a]
#		   d:--all,-a:remove all aliases. If -k is used, the local instances of these aliases will remain until the shell exits.//name:name of alias to remove//--keep-local|-k:do not remove local copy of this alias$
#		   o:gexport	[--all|-a] | [local alias name]
#		   d:--all,-a:promote all local aliases to global aliases//local alias name:name of local alias to promote$
#
#  REQUIREMENTS: ---
#          BUGS: ---
#         NOTES: ---
#        AUTHOR: Dr. Fritz Mehner (fgm), mehner.fritz@fh-swf.de
#  ORGANIZATION: FH SÃ¼dwestfalen, Iserlohn, Germany

#       CREATED: 02/06/2015 10:47
#      REVISION:  ---
#===============================================================================

# comment out if you are not developing autox
cd ${AX_BASE:-~}

if [[ -r $AX_BASE/cache/usecache ]]; then
	AX_CACHE_SITE=$AX_BASE/cache/usecache
	SHAPRINT_THIS="$(eval shasum `find -type f -not -iname 'shasumprint' -not -type l -iname '*[^~]' -printf '"'$PWD'/%P"\n'` | shasum)"
	[[ -r $AX_BASE/shasumprint ]] && SHAPRINT_PREV="$(cat $AX_BASE/shasumprint)" || SHAPRINT_PREV=NONE
	if [[ "$SHAPRINT_THIS" == "$SHAPRINT_PREV" ]]; then
		echo "No changes in any files, cache load will continue..."
		echo "Loading from Cache: use 'ax.updatecache' if you want to force an update of the cache"
		echo "(or delete $AX_BASE/shasumprint)"
		if for i in $AX_BASE/cache/usecache/*.cache; do source "$i"; done; then
			echo "Cache load succeeded."
		else
			echo "Cache load failed, please check to make sure your cache is backed up properly!"
		fi
		read -sn1
	else
		echo "Files have changed, doing a full load... please use ax.cache.create to make a new cache if you"
		echo "want to enable cache support again!"
	fi
else
	if [[ -z ${AX_ONE_TIME_MESSAGES[NOCACHE]} ]]; then	
		declare -gA AX_ONE_TIME_MESSAGES
		AX_ONE_TIME_MESSAGES[NOCACHE]=1
		echo "hint: no cache available, use ax.cache.create if you want faster load times!"
	fi
fi




if [[ ! -v AX_USER_VARS_INITIALIZED ]]; then
	declare -g AX_STARTUP_FILE_NAME="$BASH_SOURCE"
	declare -gi AX_USER_BASHRC_ORIGINATED=0
	declare -gi AX_USER_BASHRC_ORIGIN_COUNT=0
	declare -gr AX_USER_VARS_INITIALIZED=1
fi

for x in "${BASH_SOURCE[@]}"; do
	true debug printf "%s <- " "$x"
	if [[ $x == ~/.bashrc ]]; then
		AX_USER_BASHRC_ORIGINATED=1
		let AX_USER_BASHRC_ORIGIN_COUNT++
	fi
done

if [[ $AX_USER_BASHRC_ORIGINATED -eq 1 ]]; then
	true debug echo "Triggering AutoX Load OK (request comes from user's home)"
else
	true debug echo "Triggering AutoX Load DENY (request comes from outside user's home)"
	# bash_completion expects a nice return value, dont be angry!
	return 0
fi


	
[[ $(tty) != "" ]] && ax.usage() { R=$?;cat $BASH_SOURCE | grep -Po '(?<=USAGE:\s).*$'; return $R; } || ax.usage() { :; }
[[ -w ~/tmp/autox-dbg-logme ]] && echo "$@ from $(declare -p BASH_SOURCE)" >> /tmp/autox-startups
[[ ! $- =~ i ]] && { echo;echo "please use \". $BASH_SOURCE\" to run this script!!";ax.usage;sleep 2;exit 1; }

#if mapfile -t < ~/.bash_last_logout_ok && [[ -d $MAPFILE/autox/etc ]]; then
#	AX_BASE=$MAPFILE
#	if [[ -r $AX_BASE/etc/logouts ]] && mapfile -t < $AX_BASE/etc/logouts; then

if [[ $AX_STARTUP_FILE_NAME == ~/.bash_completion ]] && [[ $# -eq 0 ]]; then
	##DEV ONLY COMMENTED OUT (2 LINES)
	##echo -ne "invoked from: "; caller	
	##echo "$(tput bold)[${BASH_SOURCE[@]}]"
	true debug echo "Running in Drop-In Mode ($AX_STARTUP_FILE_NAME)$(tput sgr0)"
	# set some defaults -- because we might have been picked up
	# from an unknown or empty environment
	# ...speaking of empty, make sure we fix up the path if that is so
	[[ -z $PATH ]] && export PATH="$([[ -d ~/bin ]] && echo $HOME/bin):/bin:/sbin:/usr/bin:/usr/sbin"
	set +o nounset;		set +xv
	set +o histexpand;	set +ET
	shopt -s extglob
	shopt -u nullglob
	shopt -s interactive_comments
	shopt -s progcomp
	shopt -s promptvars
	# adjust AX_BASE to read from link target not link source
	true debug echo -n "adjusting AX_BASE reference to..."
	export AX_BASE="$(dirname $(readlink -e $BASH_SOURCE))"
	true debug echo -n $AX_BASE
	if [[ -w $AX_BASE && -d $AX_BASE ]]; then
		true debug echo "... OK"
	else
		echo " ** FAILED TO SET AX_BASE (AX_BASE=\"$AX_BASE\"/PWD=\"$PWD\")"
		echo " ** Please Check All Setups And Try Again!"
		echo " ** stop (1)."
		return 1
		exit 1
	fi
	# --dropin is needed since we set AX_BASE ahead of time
	source "$BASH_SOURCE" prologue --dropin
	source "$BASH_SOURCE" epilogue
	return $?
fi

if [[ "${AX_PHASES[defined]}" != "yes" ]]; then
	false && declare AX_PROLOGUE AX_EPILOGUE AX_RUNTIME AX_EXIT AX_NONE AX_DEBUG AX_CACHELOAD AX_CACHESTORE # for prog completion in editor support
	declare -rA AX_PHASES=( [prologue]="1"  [epilogue]="2" [runtime]="3" [exit]="4" [none]="0"	[debug]="5"     [cacheload]="6" [cachestore]="7" [defined]="yes" )
	for xx in ${!AX_PHASES[@]}; do
		declare -ri AX_${xx^^}=${AX_PHASES[$xx]}
	done


fi


declare -i AX_PHASE="${AX_PHASES[$1]}"

[[ $AX_PHASE -eq 0 ]] && { echo "Error: phase was unknown ($1)"; ax.usage; return 1; }
shift

# settings

# since epilogue passes here too, do not set if already set!
# note that whichever is used first will be used (in $1 spot)
# because --reload and --dropin are not to be used together
# and because only one flag should be specified; either --dropin
# or --reload (no further arguments are allowed!)
[[ -v AX_DROP_IN_MODE ]] || declare -g AX_DROP_IN_MODE=0
if [[ $1 == "--dropin" ]]; then
	# uncomment if you want a pause for drop-in mode (slows startup!)
	#sleep 0.5
	declare -g AX_DROP_IN_MODE=1
	shift
elif [[ $1 == "--reload" ]]; then
	unset AX_BASE
	echo "RELOADING autox..."
	sleep 1
	shift
elif [[ -v AX_BASE ]]; then
	if [[ $AX_PHASE -eq 1 ]]; then
		ax.echo "skipping re-run of autox, it is already run (unset AX_BASE to allow a new run!)"
		return
	fi
fi

# check if any more flags (there should NOT be any)
# this section however is reserved for future expansion
if [[ $* ]]; then
	echo "Warning: This version of autox does not allow any more arguments!"
	echo "         proceeding in 2 seconds unless C is pressed!"
	TMOUT=2
	unset REPLY
	read -sn1
	[[ $REPLY -eq C ]] && { echo "Stopped." && return 1; }
	TMOUT=0
	# purge
	set --
	echo "Continuing with purged command line..."
fi

# Phase 1 - Prologue (Declare Functions)

if [[ $AX_PHASE == 1 ]]; then

ax.echo() {
	case $1 in  on|off)
		case $1 in 	on) AX_DEBUGGING=1;;
					off) AX_DEBUGGING=0;;
		esac;
		echo "ax.echo is now $1";
		return 0;;
	esac
	((AX_DEBUGGING)) && echo "$@";
}
galias(){
	ax.checkaliasdir || return 2
	alias --nolocal "$@"
}
gunalias(){
	ax.checkaliasdir || return 2
	unalias --nolocal "$@"
}
lalias() {
	ax.checkaliasdir || return 2
	builtin alias "$@";
}
lunalias(){
	ax.checkaliasdir || return 2
	builtin unalias "$@"
}
gexport(){
	ax.checkaliasdir || return 2
	local EXPCNT=0
	if [[ $# -gt 0 ]]; then
		for $i in "$@"; do
			local EXPORTED=0
			for $j in "${!BASH_ALIASES[@]}"; do
				if [[ $i == $j ]]; then
					# i is an alias
					# j is the alias's name too
					builtin alias "$j" >> $AX_BASE/"$i"
					ax.echo "exported $j"
					EXPORTED=1
				fi
			done
			let EXPCNT+=EXPORTED
			((EXPORTED)) || echo "alias not found: $i"
		done
		ax.echo "$EXPCNT alias(es) exported$(let EXPCNT-$# && echo ,\ $[\ EXPCNT-$#\ ]\ skipped. || echo \.)"
	else
		local n=0
		echo
		echo "Aliases on $HOSTNAME for $USER($UID):"
		echo
		for i in $AX_BASE/*; do
			ax.echo "$i[30G$(stat $i --format=%s)"
			let n+=1
		done
		echo
		echo "$n aliases."
		echo
	fi
}

alias() 
{
	# prevents scripts from declaring permanant aliases
	declare -gi AX_ALIAS_CALLS
	if [[ $0 =~ bash ]]; then
		let AX_ALIAS_CALLS++
	else
		builtin alias "$@"
		return $?
	fi
	# dir check, no dir, act like normal 'alias' -- fails back to normal operation silently!
	ax.checkaliasdir && NOGLOB=0 || NOGLOB=1
	# pre check, exempt from usual out-of-place checks
	[[ $1 == '--nolocal' ]] && { NOLOC=1; shift; } || NOLOC=0

	if [[ $# -eq 1 ]]; then
		if [[ $1 =~ = ]]; then
			# handle single argument
			local NAME="${1%%=*}"

			if [[ ! $NAME =~ ' '+ ]]; then
				declare -gx LASTALIASSET=$NAME
			else
				echo "$NAME - alias name contains illegal characters!"
				return 1
			fi
		else
			# query for just an alias name, pass to builtin
 			# and check global if none
			if [[ ${BASH_ALIASES[$1]} ]]; then
				builtin alias "$1"
				return $?
			else
				if [[ -r $AX_BASE/alias/$1 ]]; then
					echo "global version: currently offline"
					echo "value: $(cat $AX_BASE/alias/$1)"
					# return error value so other scripts don't choke
					return 1
				else
					echo "no alias, $1, defined global or local"
					return 1
				fi
			fi					
		fi		
			
	elif [[ $# -eq 0 ]]; then
		builtin alias
		return $?
	else
		# iterate through multiple arguments
		FINALRET=0
		for i in "$@"; do
			if [[ $i =~ .*=.* ]]; then
				# a setter, handle ourselves via single argument handler ^ above
				alias "$i"
			elif [[ $i == -p ]]; then
				: # do nothing, its just print...
			else
				# call alias to handle it (shows the alias)
				builtin alias "$i"
			fi
			[[ $? -ne 0 ]] && FINALRET=1
		done
		# alias builtin behavior for multi-alias mixed failures is to
		# return 0 if ALL has succeeded, and 1 if one or more (or all)
		# have failed to be set, for any reason.
		return $FINALRET
	fi
	# if we made it here, we are ok
	if [[ $NOLOC == 0 ]]; then
    	builtin alias "$@";
	fi
	if [[ $NOGLOB == 0 ]]; then
    	builtin alias "$NAME" > $AX_BASE/alias/$NAME
    fi
}
unalias()
{
	if [[ $0 =~ bash ]]; then
		ax.checkaliasdir || return 2
		local NOLOC=0
		[[ $1 == '--nolocal' ]] && NOLOC=1
		if [[ $NOLOC -ne 1 ]]; then
			builtin unalias "$@"
		else
			if [[ $# == 0 ]]; then
				echo "required: alias name"
			fi
		fi
		[[ $# -eq 0 ]] && return
		if [[ -r $AX_BASEe/alias/$1 ]]; then
			rm $AX_BASE/alias/$1
			ax.echo "Global alias removed"
		else
			ax.echo "Not global so no global file removed."
		fi
	else
		# prevent unalias from removing global aliases when using a script
		builtin unalias "$@"
		return $?
	fi
}
ax.contains()
{
	# search for in array
	# contains [ITEM] [ARRAY CONTENTS]
	ITEM=$1
	shift
	for i do
		if [[ $i == $ITEM ]]; then
			return 0
		fi
	done
	return 1
}
ax.contains.i()
{
	# ax.contains.i [ITEM] [ARRAYNAME] [ITEM2] [ARRAYNAME2]
	local NOT_CONTAINS=0
	# contains.i [ITEM] [ARRAY-NAME]
	while (( $# % 2 == 0 )); do
		ITEM=$1
		ARRAY_NAME=$2
		shift 2
		eval 'ARRAY_VALUES=( "${'$ARRAY_NAME'[@]}" )'
		if ax.contains $ITEM "$@"; then
			echo "$( [[ $INDEX -gt 0 ]] && echo ' ' )$INDEX"
			continue
		fi
		echo "$ARRAY_NAME"
		let NOT_CONTAINS++
	done
	return $NOT_CONTAINS




}
ax.acquire()
{
	return
	# load source if needed
	# syntax: ax.acquire ~/.autox/boostrap.d/00bootstrapmacros.ax
	# same as: ax.acquire <00bootstrapmacros>
	# you MUST surround in <> to intend on using expansion!
	# no <> means it must be an absolute path!
	# so: 'ax.acquire "/$AX_BASE/bootstrap.d/00bootstrapmacros.ax" is legal
	# and: <bootstrapmacros> is the same thing
	#


	declare -gA AX_ACQUISITIONS
	for x in "$@"; do
		[[ ${x: 0:1} == "<" ]] && [[ ${x: -1:1} == ">" ]] && BRACED=1 || BRACED=0
		# trim suffixes
		j="${x%%>}"
		i="${j##<}"
		i="${j##[0-9][0-9]}"

		if ax.contains.i AX_ACQUISITIONS "$i"; then
			return 1; # already loaded, skip
		else
			if [[ $BRACED == 1 ]]; then
				ITEMS=( $(find -L $AX_BASE -iname '$i') )
				ITEM="${ITEMS[0]}"
			else
				ITEM="$x"
			fi
		fi
		source "$ITEM"
	done
}

ax.load()
{
	
	# SHIM echo "Entering ax.load"	
	ax.checkaliasdir || return 2
	ALIAS_ITEMS=( $(grep -P '^\s*alias \S+=' $AX_BASE/alias/* --line-number | grep '^[^:]*(?=:1)' -P -o) )
	ALIAS_CACHE=$(mktemp)
	if [[ ${#ALIAS_ITEMS[@]} -gt 0 ]]; then
	# SHIM	echo "Loading aliases..."
		cat ${ALIAS_ITEMS[@]} | sed 's/^alias/builtin alias/g' > $ALIAS_CACHE
	# SHIM	echo "Evaluating..."
		source $ALIAS_CACHE
	# SHIM	echo "Cleaning up..."
		rm $ALIAS_CACHE	
	else
		echo "Warning: no aliases have been defined in the autox install of $AX_BASE"
	fi
		
	#for i in $AX_BASE/alias/*; do
	#	if grep -Pq '^alias\s+\S+=\S+' "$i"; then
	#		tmploc=$(mktemp)
	#		# optimize out the trivial call to alias()
	#		cat "$i" | sed 's/^\s*alias/builtin alias/g' >> "$tmploc";
	#		echo "load $i"
	#		source $i; 
	#	else
	#		ax.echo "skipping $i, does not appear to be an alias file..."
	#	fi
	#done
}
ax.checkaliasdir(){
	[[ -r $AX_BASE/alias/alias.id ]] || { echo "error: AX_BASE not set properly, alias.id missing from alias directory!"; return 1; }
}
ax.unload(){
	ax.checkaliasdir || return 2
	for i in $AX_BASE/alias/*; do builtin unalias $(basename $i)
		ax.echo "unloading global alias $i"
	done
}
ax.reload(){
	if {
	if [[ -r $AX_BASE/autox ]] && [[ -v AX_BASE ]]; then
		local AX_BASE_TEMP=$AX_BASE
		unset AX_BASE
		source "$AX_BASE_TEMP/autox"
	else
		echo "$FUNCNAME: warning - autox AX_BASE not set or not right, loading fresh copy..."
		source "$BASH_SOURCE"
	fi
	}; then
		if [[ -v AX_BASE ]] && [[ -d $AX_BASE/alias ]]; then
			echo "Load succeeded!"
			return 0
		else
			echo "Load okay, but AX_BASE does not point to a proper location!!! Please check your installation files!!"
			return 1
		fi
	else
		echo "Failed! *check your permissions/environment/installation*"
		return 2
	fi
}

# this is the heart of the ax.config getter, however, it has some funky
# internalist workings, so you should probably want 'ax.config.get' and
# /or 'ax.config.has'. The first one echos the value if it is set, the second
# one does not, both return 0 or 1 if they exist or not, respectively.
# ax.config.set is only for adding values that do not already exist, at this time.
ax.config() {
	#declare -p CONFIG_CACHE
	CACHELOAD=0
	if [[ ! -v CONFIG_CACHE[initialized] ]]; then
		declare -gA CONFIG_CACHE=( [initialized]="true" )
	fi
	unset RETV
	if [[ $1 == cacheok ]]; then
		shift
		if [[ ${CONFIG_CACHE[$*]} ]]; then
			RETV=${CONFIG_CACHE[$*]}
			CACHELOAD=1
		fi	
	fi
	declare -gix ax_config_error=0
	
	if [[ -v RETV ]] || [[ -r $AX_BASE/config/autoxrc ]]; then
	# config file read ok
		if [[ -v RETV ]] || RETV=`grep "(?<=^${*}=).*$" -Po $AX_BASE/config/autoxrc`; then
			# store in cache (for later use of 'cacheok')
			# only if not loaded from cache on this run
			[[ $CACHELOAD == 0 ]] && CONFIG_CACHE[$*]="$RETV"
			# decide on numeric or string return method
			# numeric may need to use config.has to get a true boolean due
			# to booleans reflecting of 1 and 0 can be returns as well
			if [[ $RETV =~ ^[0-9]+$ ]]; then
				return $RETV
			else
				echo $RETV
				return 1
			fi
		else			
			CONFIG_CACHE[$*]="1"
			ax_config_error=1
			return 1
		fi
	else
	# no config file, make one
		mkdir --parents $AX_BASE/config
		touch $AX_BASE/config/autoxrc
		cat <<-EOF > $AX_BASE/config/autoxrc
		#
		# autoxrc
		# autox configuration
		#
		configuration_created=1
		EOF
		if (($?)); then
			echo "WARNING: could not create configuration file!"
			tty -s && sleep 2 # dont wait if no point
		else
			echo "Configuration File Was Created: $AX_BASE/config/autoxrc"
		fi
	fi
}

# most of the time you will wont that one :)
ax.config.get()
{
	if ax.config.has $1; then
		VALUE="$(ax.config $1)"
		echo ${VALUE:-$?}
		return 0
	else
		return 1
	fi
}

ax.config.has() { # [name]
	# must discard the result!
	ax.config $1 &> /dev/null
	return $ax_config_error;
}

ax.config.set() { # [name] [newvalue]

	if ax.config.has $1; then
		# set config myself
		echo "replacing value: $1=$2"
		ax.config.

	else
		# add config str
		echo "$1=$2" >> $AX_BASE/config/autoxrc
	fi
}
ax.helperalias() { # [alias helper (reserved for internal use) ]

	#SHIM FOR INTERNAL USE: echo "$FUNCNAME $*"
	if [[ ! -v AX_HELPER_ALIASES ]]; then
		# make sure no internal function or alias from ax gets aliased over either
		# because we would lose function over the entire library!
		declare -gxa AX_HELPER_ALIASES=( `cat $BASH_SOURCE | grep '^ax\.[^\( ]+' -Po` )
	fi
	if [[ $# -gt 1 ]]; then
		for item in "$@"; do ax.helperalias "$item"; done
	elif [[ $# -eq 1 ]]; then
		# do it
		NAME="${*%%=*}"
		OVERWRITE=NO
		for i in "${AX_HELPER_ALIASES[@]}"; do
			if [[ "$i" == "$NAME" ]]; then
				echo "Warning, This ax.helper alias is being overwritten: $i"
				OVERWRITE=YES
			else
				if ax.config cacheok debug_helperalias; then
					echo "debug: ax.helper $i being set for first time ok"
				fi
			fi
		done
		builtin alias "$@"

		[[ $OVERWRITE == NO ]] && AX_HELPER_ALIASES+=( $NAME )
		# end
	else # zero
		echo -e "builtin helper aliases:\n"
		if [[ -v AX_HELPER_ALIASES ]]; then
			local -i n=0
			for i in ${AX_HELPER_ALIASES[@]}; do
				echo -e "\t$i"
				let n++
			done
			echo -e "\n$n alias(es).\n"
		else
			echo -e "\t<<NONE>>\n\nZero alias(es).\n"
		fi
	fi

}

[[ $AX_DROP_IN_MODE -eq 1 ]] || AX_BASE="$(realpath $(dirname $BASH_SOURCE))"
{
	# helper aliases (not part of alias chain! - reserved for use by ax)
	ax.helperalias stub=function
	ax.helperalias ro=readonly
	ax.helperalias int='declare -i'
	ax.helperalias list='declare -a'
	ax.helperalias hash='declare -A'
	ax.helperalias islist='declare -pa'
	ax.helperalias ishash='declare -pA'
	ax.helperalias ax.echoa='echo ${!BASH_ALIASES[*]}'
	ax.helperalias next=done
	ax.helperalias endif=fi
	ax.helperalias elseif=elif
	ax.helperalias endselect=done
	ax.helperalias endwhile=done
	ax.helperalias enduntil=done
}

# hardwire a unique session id
if [[ ! -v AX_SESSION_ID ]] && [[ -d $AX_BASE ]] && [[ -r $AX_BASE/autox ]]; then
	AX_SESSION_ID_PREFIX="$USER:$GROUP:"
fi

# hardwire $TTY to $(tty) for this session
export TTY=$(tty 2>/dev/null || echo dumb)
# detect and set the
# AX_TERMINAL and AX_TERMINAL_PID variables
if command xprop -root 2> /dev/null | grep _NET_ACTIVE_WINDOW -q; then
	eval $(ps -p $(xprop -id `xprop -root -notype | grep -Po '(?<=_NET_ACTIVE_WINDOW: window id # )[[:xdigit:]x]+'` | grep PID | grep '[[:digit:]]*' -o) --no-header -o "AX_TERMINAL=\"%c\" AX_TERMINAL_PID=\"%p\"" | sed -r 's/(")( *)([^ ]+)( *)(")/\1\3\5/g')
else
	# TODO: further checking for hardware/ssh
	# when via a real tty or over-the-line connections (remote or otherwise),
	# the terminal is considered to be 'hardware' meaning that the user's keyboard
	# and screen are directly connected to the terminal device via the kernel, or simmilar
	# this applies to any @/dev/ttyn terminals, or, /dev/ttySnn, and not ptmx terminals.
	# ptmx is always controlled by something, if that something is not identified then
	# we assume it is ssh remotea
	if [[ $TTY =~ /dev/tty ]]; then
		AX_TERMINAL=hardware
	elif [[ $TTY =~ /dev/.*pt ]]; then
		AX_TERMINAL=ptmx_ssh
	else
		AX_TERMINAL=special
	fi
	# since no terminal emulator is running, it is bash itself that is
	# will end the "session" ultimately and it's parent (usually getty)
	# that can identify who will be starting the next round (might be
	# useful)
	AX_TERMINAL_PID=$$
	AX_TERMINAL_PPID=$PPID
fi



	# ax loader
	ax.load
	# ax bootstrap files

elif [[ $AX_PHASE == 2 ]]; then
	for i in $AX_BASE/bootstrap.d/*.ax; do
		true extdebug echo "-------------- BOOTSTRAPPER $i ------------ "
		if [[ -s "$i" ]]; then
			ax.echo $(declare -p BASH_SOURCE | sed 's/declare\s?//g') source "$i" "$$" "$USER" "$AX_BASE"
			. "$i" "$$" "$USER" "$AX_BASE"
		fi
		true extdebug echo "----------- END BOOTSTRAPPER $i ----------- "
	done
elif [[ $AX_PHASE -le 4 ]]; then
	echo "runtime and exit phases are not yet supported, doing nothing successfully (0)..."
	return 0
else
	echo "Unsupported phase: $AX_PHASE"
	return 122
fi

# --- make sure some settings are forced off

set +o nounset
set +EHxvT

# ---------------------------------- end of script ---------------------------------------------------
# this last echo is for separation, dont delete it unless you hate whitespace
if ax.config.has hatewhitespace; then
	true "";
else
	echo "";
fi
