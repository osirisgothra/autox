alias _comp_sf='complete -W "$(for i in /usr/share/consolefonts/*; do basename ${i/.psf.gz/}; done | tr '\''\n'\'' '\'' '\'')" sf'
alias a='cat <<< '\''echo arg1=$1'\'' | source /dev/stdin'
alias ac='a_c() { command ls -l --author --color "$@" | less -F -raw --no-init --prompt "$(printf %${COLUMNS}s\ $PWD\ [$*]\ $USER\ $UID)"; };a_c'
alias aclear='printf "[%s" "2J" "0;0H" "3H" "s" "u" "0m"'
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'
alias apt-builds='sudo apt-get build-deps'
alias apt-get='sudo apt-get --no-remove --yes'
alias apt-source='sudo apt-get source'
alias apt-upgrade='sudo nice apt-get update; sudo nice apt-get dist-upgrade --no-remove --yes'
alias arg1=' | source /dev/stdin'
alias argtest='cat <<< "echo arg1=$1 arg2=$2" | source /dev/stdin'
alias ark='ark -ab'
alias arora='@arora'
alias autox='_autox_temp() { cd ~/.autox && source ./autox "$@"; R=$?;unset -f $FUNCNAME; return $R;}; _autox_temp'
alias ax.echoa='echo ${!BASH_ALIASES[*]}'
alias ax.kde.control='$(eval "dialog --output-fd 1 --menu \"systemsettings 5.2.2\" 0 0 0 $(cat $AX_BASE/etc/k4.dlist $AX_BASE/etc/k5.dlist | tr '\''\n'\'' '\'' '\'')")'
alias ax.reloader='declare -pF | grep ax\.reloader | perl -wne '\''use v5.20;say $& if /(?<=-f ).*/;'\'''
alias b='_b() { unset -f $0; echo "arg1=$1"; }; _b'
alias bar='_b() { unset -f $0; echo "arg1 for bar=$1"; }; _b'
alias beep.off='sudo modprobe -r pcspkr;echo beep: off'
alias beep.on='sudo modprobe pcspkr; beep -l 1;echo beep: on'
alias beep.toggle='[[ -r /dev/input/by-path/platform-pcspkr-event-spkr ]] && { beep.off; } || { beep.on; }'
alias bluroff='AX_BLUR=OFF; makeblur -iu; dialog --colors --nook --nocancel --pause "Blur Has Been Disabled" $((LINES/4 > 8?LINES/4:8)) $((COLUMNS/2)) 0; clear; true'
alias bluron='AX_BLUR=ON; makeblur -i; dialog --colors --nook --nocancel --pause "Blur Has Been Enabled, Please Redraw The Display For Changes To Take Effect." $((LINES/4 > 8?LINES/4:8)) $((COLUMNS/2)) 0; clear;true'
alias blurtgl='[[ $AX_BLUR == ON ]] && bluroff || bluron; clear; true'
alias bye='while true; do suspend; sleep 15; echo "PRESS CTRL+C TO ABORT NOW"; while pgrep suspend; do sleep 1; echo "(waiting for suspend to exit)"; done; done'
alias c='_c(){ unset -f $FUNCNAME; cat "$@"; local r=$?; echo; return $r; };_c'
alias clem='@clementine'
alias colortable='cat /gxbase/doc/colortable256.data | less -P "256-Color ANSI (8-bit) Color Code Table + FBTERM Derivitave$(printf %${COLUMNS}s \" \")" -raw'
alias cpan='sudo -H cpan'
alias cpln='echo "about to copy 1[source] to 2[dest], as link..."; sleep 2; sudo ln -vs'
alias define='dict -d english -d wn'
alias df='df -h'
alias dolphin='@dolphin'
alias du='du -hd1 | sort -h'
alias duu='command du'
alias egrep='egrep --color=auto'
alias elseif='elif'
alias endif='fi'
alias endselect='done'
alias enduntil='done'
alias endwhile='done'
alias executables='for x in $PATH; do cd $x; for i in *; do [[ -x $i ]] && [[ ! -d $i ]] && [[ -r $i ]] && echo $i;done; done'
alias fgrep='fgrep --color=auto'
alias firefox='@firefox'
alias fo='done'
alias foo='cat <<< '\''echo arg1 for foo=$1'\'' | source /dev/stdin'
alias free='echo -n "[5A";while /src/mini/kbhit/kbhit; do echo -n "[s";free -ht;sleep 0.5;echo -n "[u"; done'
alias freeup='for i in 1 2 3 4; do echo $i > /proc/sys/vm/drop_caches; sleep 1; echo "$i/4 done";done'
alias goo='/src/ax/lib/pgoo.py'
alias goodnight='clear;echo "good night...(doing endofday stuff)"; say "good night, master! I will shut down in about 10 minutes or so.";sleep 5;apt-get install xfce4-goodies gnome-sushi qttools5-dev-tools qt4-dev-tools; apt-get update; apt-get dist-upgrade; e4defrag /dev/sdb1 /dev/sda1; sudo apt-get --yes autoremove; sudo apt-get --yes autoclean; sudo updatedb; sudo rm /tmp/* /var/tmp/* --preserve-root --verbose; sleep 90; while true; do noisefortune4; bye; sleep 15; echo "PRESS CTRL+C NOW to exit sleep";say "good morning, master! Press Control See,to end this sleep cycle!";sleep 15;done'
alias goto='_goto(){ if ITM=$(readlink -e `which $* || locate -n1 $*`); then R=$?; [[ -d $ITM ]] && cd "$ITM" || cd "$(dirname $ITM)"; else echo "No matches in which(1) or nlocate(1): $ITM"; R=127; fi;unset -f $FUNCNAME; return $R; };_goto'
alias grep='grep --color=auto'
alias hash='declare -A'
alias hib='sudo pm-hibernate'
alias htop='sudo htop'
alias idle='_idle() { PID=`pidof $1`; sudo renice -n 20 -p $PID; sudo ionice -c idle -p $PID; echo "Idle on $PID ($1)"; shift; if [[ $1 ]]; then _idle "$@"; fi; unset -f _idle; }; _idle'
alias int='declare -i'
alias ip='/usr/bin/ipython3'
alias ipython='ipython3 qtconsole --style=monokai & jobs -pl | sed s?Running?Detached/Running?g; disown'
alias ishash='declare -pA'
alias islist='declare -pa'
alias j='jobs'
alias jobs='jobs -pl'
alias kill='_kill() { if ! kill $*; then killall $*; fi; local R=$?; unset -f $FUNCNAME; return $R; }; _kill "$@"'
alias komodo='function _k() { unset -f $FUNCNAME; komodo "$@" &> /dev/null & disown; }; _k'
alias l='ls -CF'
alias la='ls -A'
alias link='elinks'
alias links='elinks'
alias list='declare -a'
alias ll='ls -alF'
alias ln='ln -sTvLr'
alias locate='locate -e'
alias ls='ls --color=auto'
alias makeduid='uuid > $(basename $PWD).id'
alias makelic='makelic.pl'
alias makepercpp='for i in *.cpp; do echo -e "${i%%.cpp}: $i\n\tg++ $i -o ${i%%.cpp} \${CFLAGS}\n"; done'
alias makepercpp_cleanall='echo -e "clean:\n\trm -f $(makepercpp_targets)\n\nall: $(makepercpp_targets)\n\n.PHONY: clean all\n"'
alias makepercpp_targets='( for i in *.cpp; do echo -n "${i%%.cpp} "; done )'
alias man='/usr/bin/man'
alias mann='/usr/bin/man'
alias med='echo "cd yes4" | source /dev/stdin'
alias mem='echo -e "\n$(cat /proc/meminfo | column)\n"'
alias merge='__merge() { SRC=$1;DST=$2; [[ -w $SRC && -w $DST && -d $SRC && -d $DST ]] && { mkdir /tmp/merge; for X in "$DST" "$SRC"; do cd "$X"; mv -nv * .[^.]* /tmp/merge; cd ~-; done; if rmdir "$SRC" "$DST"; then mv /tmp/merge "$DST"; else echo "ERROR: STOPPED"; cd /tmp/merge; fi; R=$?;echo "merge completed with $R errors"; unset -f _merge; return $R; }; __merge'
alias mergedirs='__merge() { SRC=$1;DST=$2; [[ -w $SRC && -w $DST && -d $SRC && -d $DST ]] && { mkdir /tmp/merge; for X in "$DST" "$SRC"; do cd "$X"; mv -nv * .[^.]* /tmp/merge; cd ~-; done; if rmdir "$SRC" "$DST"; then mv /tmp/merge "$DST"; else echo "ERROR: STOPPED"; cd /tmp/merge; fi; R=$?;echo "merge completed with $R errors"; unset -f _merge; return $R; }; __merge'
alias mkdir='mkdir -pv'
alias modin='sudo modprobe'
alias modout='sudo modprobe -r'
alias mvln='_mvln(){ 
if [[ -L "$1" ]] && [[ -e "$2" ]]; then
  if [[ -w "$1" ]] || [[ $AX_MVLN_WRITEOUT_NEEDSUDO == 1 ]]; then [[ ! -w "$1" ]] && SUDO=sudo || SUDO=command
    echo "about to point $1, which points to $(readlink $1), to $2. The original link will be overwritten. Is this okay with you? [ y = yes  n = no ]"
    if [[ "$(while true; do read -sn1; [[ $REPLY =~ [yn] ]] && break; done; echo $REPLY)" =~ [yY] ]]; then
       echo "creating the new link, $1 - points to -> $2...."
       if ! $SUDO ln -s "$2" "$1" --force -v; then echo "error-check your permissions!"; fi
       echo "process completed (result code=$?)"
    fi
  else
    echo "failure: cannot write to this item, need admin rights!"
    AX_MVLN_WRITEOUT_NEEDSUDO=1
    _mvln "$@"
  fi
else
  echo "usage: mvln [existing symbolic link] [new target]*"
  echo ""
  echo " ex sy link - a symbolic link with a target already in place, missing or not"
  echo " new target - an exisitng file, directory, device, etc to be the new target"
  echo ""
  echo "* the new target must exist, can be any valid filesysten object (all links created are SOFT links)"
  echo "  furthermore, all links being replaced are permenantly discarded, no backups made."
  echo "* mvln will NEVER delete a filesystem object other than a symbolic link, ever!"
  echo "* send bugs to (read the README that came with autox in $AX_BASE/doc/README!!"
  (exit 2)
fi
R=$?
unset -f _mvln
return $?
}
_mvln'
alias n='perl -wne'
alias nano='nano'
alias ned='_ned(){ nano ~/.nano/$1.nanorc;F=$?;unset -f _ned;(exit $F); }; _ned'
alias next='done'
alias nls='_nls(){ ls "$@" ~/.nano/*.nanorc | column -s $COLUMNS; local F=$?; unset -f _nls; return $F; }; _nls'
alias noisefortune4='clear;echo -e "And now, huhuhuhuhuhuh..., for Your FOUR fortunes, huhuhuhuhuh.....\n\n";sudo modprobe pcspkr;sleep 6; for d in 1 2 3 4; do fortune > /tmp/$d; done;(beep -d 900 -f 1000 -l 100 -r 4 &) &>/dev/null; for d in 1 2 3 4; do echo -e "\n\n\n"; cat /tmp/$d; sleep 1; done; sudo modprobe -r pcspkr'
alias normal='_normal() { PID=`pidof $1`; sudo renice -n 0 -p $PID; sudo ionice -c none -p $PID; echo "Normal (No Special Priority) on $PID ($1)"; shift; if [[ $1 ]]; then _normal "$@"; fi; unset -f _normal; }; _normal'
alias of='| while read'
alias okular='@okular'
alias pc='perlconsole'
alias perlconsole='/usr/bin/perlconsole'
alias pgrep='pgrep -l -f'
alias ph='perlhelp'
alias phash='builtin hash'
alias pkgconf='pkg-config'
alias pycharm='@pycharm'
alias qbittorrent='@qbittorrent'
alias qtcreator='@qtcreator'
alias realtime='__rt() { PID=`pidof $1`; sudo renice -n -20 -p $PID; sudo ionice -c realtime -n 0 -p $PID; echo "Realtime on $PID ($1)"; shift; if [[ $1 ]]; then __rt "$@"; fi; unset -f __rt; }; __rt'
alias rem='#'
alias rmpwd='[[ $PWD != / ]] && { cd .. ; rmdir -v ~-; }'
alias ro='readonly'
alias s='perl -wpe'
alias sbax.off='rm '
alias sbax.on='touch '
alias second=' | source /dev/stdin'
alias service='sudo service'
alias sf='/bin/setfont'
alias startx='command startx& disown; logout'
alias stub=';function'
alias stubfunc='function sf() { function $1 () { stub_${1}; }; }; function stub_'
alias subl='@subl'
alias sunlink='_sunln() { [[ -L "$1" ]] && t=$(sudo readlink "$1") && sudo rm "$1" && sudo mv "$t" "$1"; r=$?; unset -f _sunln; }; _sunln'
alias suspend='sudo pm-suspend'
alias svcstats='echo * | s "s/\.(conf|sh)/\n/g" | while read -a SVC; do [[ $SVC ]] && { printf "%-40s" "$SVC:"; sudo service $SVC status | grep -Po "Active: .+ \(.+\)( since.+ago)?"; }; done'
alias thendo='); do '
alias top='sudo nice -n -10 htop -d 2 --sort-key=CPU -u gabriel'
alias tputtest='__tt(){ stty "$@"; echo "Lorem ipsum dolar... 123"; unset -f __tt;stty sgr0;}
;
__tt()'
alias tree='tree -A'
alias unlink='_unln() { t=$(readlink $1); rm $1; mv $t $1; r=$?; unset -f _unln; }; _unln'
alias webstorm='@webstorm.sh'
alias xchg='_xchg(){ local -i R=0; mv "$1" "__xchg_temp__"; let R+=$?; mv "$2" "$1"; let R+=$?; mv "__xchg_temp__" "$2"; let R+=$?; unset -f $FUNCNAME; return $R; }; _xchg'
alias xclip='xclip -sel cli'
alias xprop='xprop2'
alias xprop2='_xprop2() { unset -f _xprop2; command xprop $@ | grep -vP '\''^(\s|\t|$|_NET_SUPPORTED|_NET_WM_ICON|_?QT|RESOURCE).*'\''; };_xprop2'
